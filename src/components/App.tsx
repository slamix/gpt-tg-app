import { useEffect, useState } from "react";
import { Navigate, Route, Routes, HashRouter } from "react-router-dom";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "@/slices";
import { initAuth } from "@/slices/thunks/authThunks";
import { setToken } from "@/slices/authSlice";
import { init } from "@/init";
import { retrieveRawInitData } from "@telegram-apps/sdk";
import { routes } from "@/navigation/routes";
import { ModalRemove } from "@/components/modals/ModalRemove";
import { ModalRename } from "@/components/modals/ModalRename";

// react-query –∫–ª–∏–µ–Ω—Ç
const queryClient = new QueryClient();

export function App() {
  const dispatch = useDispatch();
  const { token } = useSelector((state: RootState) => state.auth);
  const [isInitialized, setIsInitialized] = useState(false);
  const [isCheckingAuth, setIsCheckingAuth] = useState(true);

  // 1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram SDK –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  useEffect(() => {
    const initializeApp = async () => {
      try {
        await init({
          debug: true,
          eruda: true,
          mockForMacOS: true,
        });
        setIsInitialized(true);
      } catch (err: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK:', err);
        setIsInitialized(true); // –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    };
    initializeApp();
  }, [dispatch]);

  // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  useEffect(() => {
    if (!isInitialized) return;

    const checkAuthAndInit = async () => {
      try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...');
        const { getToken } = await import('@/utils/tokenStorage');
        const storedToken = await getToken();
        
        if (storedToken) {
          // –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Redux
          console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ state');
          dispatch(setToken(storedToken));
          setIsCheckingAuth(false);
          return;
        }
        
        // –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç - –Ω—É–∂–Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ initData
        console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        const initData = retrieveRawInitData();
        console.log('üì± initData:', initData ? '–ø–æ–ª—É—á–µ–Ω—ã' : '–ù–ï –ø–æ–ª—É—á–µ–Ω—ã');
        
        if (initData) {
          console.log('üîê –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /auth/telegram...');
          dispatch(initAuth(initData) as any);
        } else {
          console.error("‚ùå initData –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram WebApp");
        }
        setIsCheckingAuth(false);
      } catch (err: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
        setIsCheckingAuth(false);
      }
    };

    checkAuthAndInit();
  }, [isInitialized, dispatch]);

  // 3Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  console.log('üé® –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞:', { token: !!token, isInitialized, isCheckingAuth });
  
  // –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω
  if (isCheckingAuth) {
    return null;
  }
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω
  if (!token) {
    return null;
  }

  console.log('‚úÖ –¢–æ–∫–µ–Ω –µ—Å—Ç—å, —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
  return (
    <QueryClientProvider client={queryClient}>
      <HashRouter>
        <Routes>
          {routes.map((route) => (
            <Route key={route.path} {...route} />
          ))}
          <Route path="*" element={<Navigate to="/" />} />
        </Routes>
      </HashRouter>

      {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–¥–∞–ª–∫–∏ */}
      <ModalRemove />
      <ModalRename />
    </QueryClientProvider>
  );
}
