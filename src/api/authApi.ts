import axios from "axios";
import { setToken } from "../utils/tokenStorage";

const API_URL = import.meta.env.VITE_API_HOST;

// –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π axios instance –¥–ª—è auth –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ interceptor)
const authAxios = axios.create({
  baseURL: API_URL,
  withCredentials: true,
  headers: { "Content-Type": "application/json" },
});

export async function authorize(initData: string): Promise<string> {
  console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å initData:', initData.substring(0, 50) + '...');
  console.log(initData);
  const { data } = await authAxios.post('auth/telegram', { initData });
  // Check if cookie exists
  console.log('All cookies:', document.cookie);

  // Check specific cookie
  const cookies = document.cookie.split(';');
  const refreshToken = cookies.find(c => c.trim().startsWith('refresh_token='));
  console.log('Refresh token cookie:', refreshToken);
  console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω');
  const { access_token } = data;
  await setToken(access_token);
  return access_token;
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ—Ä–µ—à–µ–π
let isRefreshing = false;
let refreshPromise: Promise<string | null> | null = null;

export async function refreshToken(): Promise<string | null> {
  // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç —Ä–µ—Ñ—Ä–µ—à - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ –ø—Ä–æ–º–∏—Å
  if (isRefreshing && refreshPromise) {
    console.log('‚è≥ –†–µ—Ñ—Ä–µ—à —É–∂–µ –∏–¥—ë—Ç, –∂–¥—ë–º...');
    return refreshPromise;
  }

  isRefreshing = true;
  
  refreshPromise = (async () => {
    try {
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ auth/refresh —Å cookies...');
      const { data } = await authAxios.post('auth/refresh');
      console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ refresh');
      const { access_token } = data;
      await setToken(access_token);
      return access_token;
    } catch (err: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ refresh:", err?.response?.status, err?.response?.data || err?.message);
      return null;
    } finally {
      isRefreshing = false;
      refreshPromise = null;
    }
  })();

  return refreshPromise;
}
